body {
    width: 100%;
    padding: 0;
    margin: 0;
    background-color: rgb(170, 174, 182);
}

#mycanvas {  /* dynamically change the p5 canvas to always fill the parent div width.  The width of the canvas from p5 is dynamically created, meaning that it gets applied at element level. There is no way of overriding that with specificity, so you need to raise a declaration as !important: */
  float: left;
  width: 100% !important;
  height: 100% !important;
}

 #p5parent { /* then you have to place the canvas within a parent div which has the correct attributes to dynamically create the right dimensions */
  float: left;
  height: 100%;
  width: 100%;
}

@media (min-aspect-ratio: 3/2) {
  .containerclass{
    position: relative;
    width: 48%;
    display: block;
    margin-left: auto;
    margin-right: auto;
    /* border: 5px solid red; */
  }
}

@media (min-aspect-ratio: 16/17) and (max-aspect-ratio: 3/2) {
  .containerclass{
    width: 60%;
    display: block;
    margin-left: auto;
    margin-right: auto;
    /* border: 5px solid blue; */
  }
}

@media (max-aspect-ratio: 16/17) {
  .containerclass{
    width: 100%; /* set to 102% to hack around an issue with space to the right in portrait mode*/
    display: block;
    margin-left: auto;
    margin-right: auto;
    /* border: 5px solid yellow; */
    }
}

h1 {
  font-family: Arial, Helvetica, sans-serif;
  padding: 20em, 0;
  text-align: center;
  font-size: 5em;
  color: white;
}

#welcometext {
  font-family: Arial, Helvetica, sans-serif;
  padding: 20em, 0;
  text-align: center;
  font-size: 2em;
  color: white;
}

#clicktostart {
  font-family: Arial, Helvetica, sans-serif;
  padding: 20em, 0;
  text-align: center;
  font-size: 3em;
  color: white;
}

p {
  font-family: Arial, Helvetica, sans-serif;
  padding: 20em, 0;
  text-align: center;
  font-size: 1.5em;
  color: white;
}

img {
    width: 100%;
    height: auto;
    display: block; /* this fixes space beneath the images within the divs */
}

span.clear { clear: left; display: block; } /* clears the float thus ensuring the images remain within the container div */


/* The following styles the select boxes*/


#select1 {

    float: left;
    width: 33%;
}

#select2 {

    float: left;
    width: 33%;
}

#select3 {

    float: left;
    width: 34%;
}

 /* The container must be positioned relative: */
 .keymenu {
    position: relative;
    font-family: Arial;
  }

 .scalemenu {
    position: relative;
    font-family: Arial;
  }

  .octavemenu {
    position: relative;
    font-family: Arial;
  }

  .keymenu select {
    display: none; /*hide original SELECT element: */
  }

  .scalemenu select {
    display: none; /*hide original SELECT element: */
  }

  .octavemenu select {
    display: none; /*hide original SELECT element: */
  }

  .select-selected {
    background-color: rgb(154, 30, 255);
  }

  /* Style the arrow inside the select element: */
  .select-selected:after {
    position: absolute;
    content: "";
    top: 14px;
    right: 10px;
    width: 0;
    height: 0;
    border: 6px solid transparent;
    border-color: #fff transparent transparent transparent;
  }

  /* Point the arrow upwards when the select box is open (active): */
  .select-selected.select-arrow-active:after {
    border-color: transparent transparent #fff transparent;
    top: 7px;
  }

  /* style the items (options), including the selected item: */
  .select-items div,.select-selected {
    color: #ffffff;
    padding: 8px 16px;
    border: 1px solid transparent;
    border-color: transparent transparent rgba(0, 0, 0, 0.1) transparent;
    cursor: pointer;
  }

  /* Style items (options): */
  .select-items {
    position: absolute;
    background-color: DodgerBlue;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 99;
  }

  /* Hide the items when the select box is closed: */
  .select-hide {
    display: none;
  }

  .select-items div:hover, .same-as-selected {
    background-color: rgba(0, 0, 0, 0.1);
  }
